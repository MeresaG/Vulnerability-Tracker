const { response } = require('express');
const mongoose = require('mongoose');
const Vulnerability = mongoose.model(process.env.VULNERABILITY_MODEL);
const personController = require('./personController');
const refactoringHelpers = require('../helpers/refactoringHelpers');


const _handleFoundNotFoundVulnerability = function(vulnerability,response ) {
    if(vulnerability) {
        refactoringHelpers._handleSuccessResponse(vulnerability, response)
    }
    else {
        refactoringHelpers._handleNotFoundResponse(response);
    }
}

const _updateVulnerability =  async function(req, res, updateVulnerabilityCallback) {
    const vulnerabilityId = req.params.vulnerabilityId;
    const response = refactoringHelpers.initResponse();
    //check if vulnerabilityId is valid
    refactoringHelpers._checkObjectIdRefactor(res, vulnerabilityId, null, response);
    
    try {
        
        const vulnerability = await Vulnerability.findById(vulnerabilityId).exec() 
        
        if(!vulnerability) {
            console.log("vulnerability is null");
            response.status = process.env.HTTP_STATUS_NOTFOUND;
            response.message = {message : "vulnerability with given Id not found"};
            refactoringHelpers._handleReturnResponse(res, response);
        }
         else if(vulnerability) {
            updateVulnerabilityCallback(req, res, vulnerability, response);
        }

    } catch (error) {
        console.log("Error finding vulnerability");
        response.status = process.env.HTTP_STATUS_INTERNAL_ERROR;
        response.message = err;
        refactoringHelpers._handleReturnResponse(res, response)
    }
    

}

const getOneVulnerability = function(req, res) {
    console.log("Get One Vulnerability Controller called");
    const vulnerabilityId= req.params.vulnerabilityId;
    const response = refactoringHelpers.initResponse();
    //check if gameId is valid
    
    refactoringHelpers._checkObjectIdRefactor(res, vulnerabilityId, null, response);
    Vulnerability.findById(vulnerabilityId).exec()
                .then( (vulnerability) => _handleFoundNotFoundVulnerability(vulnerability, response))
                .catch( (err) => refactoringHelpers._handleErrorResponse(err, response))
                .finally(() => refactoringHelpers._handleReturnResponse(res, response))

}

const getAllVulnerabilities = function(req, res) {
    console.log("Get All Vulnerabilities Controller called");
    const response = refactoringHelpers.initResponse()
    let offset = process.env.OFFSET;
    let count = process.env.COUNT;
    if(req.query && req.query.offset) {
        offset = parseInt(req.query.offset, 10);
    }
    if(req.query && req.query.count) {
        count = parseInt(req.query.count, 10);
        
    }
    if(isNaN(offset) || isNaN(count)) {
        console.log("Offset or Count is not a number");
        response.status = process.env.HTTP_STATUS_NOTFOUND;
        response.message = {message : "Offset and Count must be  digits"};
        
    }
    if(response.status !== process.env.HTTP_STATUS_OK) {
        return refactoringHelpers._handleReturnResponse(res, response);
    }
     else {
        Vulnerability.find().skip(offset).limit(count).exec()
                        .then( (vulnerabilities) => refactoringHelpers._handleSuccessResponse(vulnerabilities, response))
                        .catch((err) => refactoringHelpers._handleErrorResponse(err, response))
                        .finally(() => refactoringHelpers._handleReturnResponse(res, response))
    }
}

const AddOneVulnerability = async function(req, res) {
    console.log("Add One Vulnerability Controller called");
    const response = refactoringHelpers.initResponse();
    // const assignedTo = personController.getPerson(req, res)

    const newVulnerability = {

        vulnerabilityType: req.body.vulnerabilityType,
        projectName: req.body.projectName,
        description: req.body.description,
        status: req.body.status,
        severity: req.body.severity,
        assignedPerson: req.personId,
        assigner: req.personId,
        Comment:[]

    }

    Vulnerability.create(newVulnerability)
                .then( (vulnerability) => refactoringHelpers._handleSuccessResponse(vulnerability, response))
                .catch( (err) => refactoringHelpers._handleErrorResponse(err, response))
                .finally(() => refactoringHelpers._handleReturnResponse(res, response) )

}

const deleteOneVulnerability = (req, res) => {

    console.log("Delete One Vulnerability Controller called");
    const vulnerabilityId= req.params.vulnerabilityId;
    const response = refactoringHelpers.initResponse()
    refactoringHelpers._checkObjectIdRefactor(res, vulnerabilityId, null, response);

    Vulnerability.findByIdAndDelete(vulnerabilityId).exec()
                .then( (vulnerability) => _handleFoundNotFoundVulnerability(vulnerability, response))
                .catch( (err) => refactoringHelpers._handleErrorResponse(err, response))
                .finally(() => refactoringHelpers._handleReturnResponse(res, response))

}


const fullUpdateVulnerability = function(req, res) {
    console.log("Update One Vulnerability Controller called.")
    vulnerabilityUpdate = function(req, res, vulnerability, response){

        vulnerability.vulnerabilityType = req.body.vulnerabilityType;
        vulnerability.projectName  = req.body.projectName;
        vulnerability.description = req.body.description;
        vulnerability.status = req.body.status;
        vulnerability.severity =  req.body.severity;
        vulnerability.assignedPerson =  req.personId;
        vulnerability.assigner = req.personId,

        refactoringHelpers._saveRefactory(res, vulnerability, response);
    }
    _updateVulnerability(req, res, vulnerabilityUpdate);
}

const partialUpdateVulnerability = function(req, res) {
    console.log("Update One Vulnerability Controller called.")
    vulnerabilityUpdate = function(req, res, vulnerability, response){

        vulnerability.vulnerabilityType = req.body.vulnerabilityType || vulnerability.vulnerabilityType;
        vulnerability.projectName  = req.body.projectName || vulnerability.projectName;
        vulnerability.description = req.body.description || vulnerability.description;
        vulnerability.status = req.body.status || vulnerability.status;
        vulnerability.severity =  req.body.severity || vulnerability.severity;
        vulnerability.assignedPerson =  req.personId || vulnerability.assignedPerson;
        vulnerability.assigner = req.personId || vulnerability.assigner

        refactoringHelpers._saveRefactory(res, vulnerability, response);
    }
    _updateVulnerability(req, res, vulnerabilityUpdate);
}

module.exports = {
    getOneVulnerability: getOneVulnerability,
    getAllVulnerabilities: getAllVulnerabilities,
    deleteOneVulnerability: deleteOneVulnerability,
    fullUpdateVulnerability: fullUpdateVulnerability,
    partialUpdateVulnerability:partialUpdateVulnerability,
    AddOneVulnerability: AddOneVulnerability
}