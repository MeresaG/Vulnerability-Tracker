const mongoose = require('mongoose');
const Vulnerability = mongoose.model(process.env.VULNERABILITY_MODEL);
const refactoringHelpers = require('../helpers/refactoringHelpers');


const _partialUpdateVulnerability =  function(req, res, vulnerability, response) {
    const updateComment  = vulnerability.comment.id(req.params.commentId);
    if(!updateComment) {
        response.status = process.env.HTTP_STATUS_NOTFOUND;
        response.message = {"message": "comment with this id not found!"}
        return res.status(response.status).json(response.message);
    }
    //updateComment.set(req.body);
    updateComment.title = req.body.title || updateComment.title;
    updateComment.comment = req.body.comment || updateComment.comment;
    //updateComment.set(updateComment);
    refactoringHelpers._saveRefactory(res, vulnerability, response)
}

const _fullUpdateVulnerability =  function(req, res, vulnerability, response) {
    const updateComment  = vulnerability.comment.id(req.params.commentId);
    if(!updateComment) {
        response.status = process.env.HTTP_STATUS_NOTFOUND;
        response.message = {"message": "comment with this id not found!"}
        return res.status(response.status).json(response.message);
    }
    updateComment.set(req.body);
    refactoringHelpers._saveRefactory(res, vulnerability, response)
}

const _deleteVulnerability =  function(req, res, vulnerability, response) {
    const deletedCom  = vulnerability.comment.id(req.params.commentId);
    if(!deletedCom) {
        response.status = process.env.HTTP_STATUS_NOTFOUND;
        response.message = {"message": "comment with this id not found!"}
        return res.status(response.status).json(response.message);
    }
    vulnerability.comment.id(req.params.commentId).remove();
    refactoringHelpers._saveRefactory(res, vulnerability, response);
    
}

const _addComment = function(req, res, vulnerability, response) {
    const newComment = {
        commentedPerson: "623a7797112eee9b3211cbd2",
        title: req.body.title,
        comment: req.body.comment,
    }
    vulnerability.comment.push(newComment);
    refactoringHelpers._saveRefactory(res, vulnerability, response);
    
}

const getAllComments = function(req, res) {
    console.log("GET All Comment controller Called");
    const vulnerabilityId= req.params.vulnerabilityId;
    const response = refactoringHelpers.initResponse();

    refactoringHelpers._checkObjectIdRefactor(res, vulnerabilityId, null, response)
    Vulnerability.findById(vulnerabilityId).select('comment').exec((err, vulnerability) => refactoringHelpers._checkResponseRefactor(err, req, res, vulnerability, true, false, response));
    
}

const getOneComment = function(req, res) {
    console.log("GET One Comment controller Called");
    const vulnerabilityId= req.params.vulnerabilityId;
    const commentId = req.params.commentId;
    const response = refactoringHelpers.initResponse();
    refactoringHelpers._checkObjectIdRefactor(res, vulnerabilityId, commentId, response)
    Vulnerability.findById(vulnerabilityId).select('comment').exec((err, vulnerability) => refactoringHelpers._checkResponseRefactor(err, req, res, vulnerability, true, false, response, commentId));
    
}
const addOneComment = function(req, res) {
    console.log("Add One Comment Controller Called");
    const vulnerabilityId = req.params.vulnerabilityId;
    const response = refactoringHelpers.initResponse();

    refactoringHelpers._checkObjectIdRefactor(res, vulnerabilityId, null, response);
    refactoringHelpers._findByRefactory(req, res, Vulnerability, vulnerabilityId, 'comment', response, _addComment);
    
}

const deleteOneComment = function(req, res) {
    console.log("Delete one Comment controller called");
    const vulnerabilityId= req.params.vulnerabilityId;
    const commentId = req.params.commentId;
    const response = refactoringHelpers.initResponse();
    refactoringHelpers._checkObjectIdRefactor(res, vulnerabilityId, commentId, response);
    refactoringHelpers._findByRefactory(req, res, Vulnerability, vulnerabilityId, 'comment', response, _deleteVulnerability);

}

const fullUpdateComment = function(req, res) {
    console.log("Delete one Comment controller called");
    const vulnerabilityId= req.params.vulnerabilityId;
    const commentId = req.params.commentId;
    const response = refactoringHelpers.initResponse();
    
    refactoringHelpers._checkObjectIdRefactor(res, vulnerabilityId, commentId, response);
    refactoringHelpers._findByRefactory(req, res, Vulnerability, vulnerabilityId, 'comment', response, _fullUpdateVulnerability);

    
}

const partialUpdateComment = function(req, res) {
    console.log("Delete one Comment controller called");
    const vulnerabilityId= req.params.vulnerabilityId;
    const commentId = req.params.commentId;
    const response = refactoringHelpers.initResponse();
    
    refactoringHelpers._checkObjectIdRefactor(res, vulnerabilityId, commentId, response);
    refactoringHelpers._findByRefactory(req, res, Vulnerability, vulnerabilityId, 'comment', response, _partialUpdateVulnerability);

    
}

module.exports = {
    getAllComments : getAllComments,
    getOneComment: getOneComment,
    addOneComment: addOneComment,
    deleteOneComment: deleteOneComment,
    fullUpdateComment: fullUpdateComment,
    partialUpdateComment:partialUpdateComment
}