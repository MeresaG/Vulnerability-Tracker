const mongoose = require('mongoose');
const Vulnerability = mongoose.model(process.env.VULNERABILITY_MODEL);
const vulnerabilityController = require('./volunerabilityController');

const _addComment = function(req, res, vulnerability, response) {
    const newComment = {
        commentedPerson: "623a7797112eee9b3211cbd2",
        title: req.body.title,
        comment: req.body.comment,
    }
    vulnerability.comment.push(newComment);
    vulnerability.save(function(err, updatedVulnerability) {
        if (err) {
            response.status= process.env.HTTP_STATUS_INTERNAL_ERROR;
            response.message= err;
            } else {
            response.status= process.env.HTTP_STATUS_CREATED;
            response.message= updatedVulnerability.comment;
            }
            return res.status(response.status).json(response.message);
           
    })
}

const getAllComments = function(req, res) {
    return
}

const getOneComment = function(req, res) {
    return
}
const addOneComment = function(req, res) {
    console.log("Add One Comment Controller Called");
    const vulnerabilityId = req.params.vulnerabilityId;
    const response = vulnerabilityController.initResponse();

    if(!mongoose.isValidObjectId(vulnerabilityId)) {
        console.log("Invalid vulnerabilityID");
        response.status = process.env.HTTP_STATUS_NOTFOUND;
        response.message = {message : "Invalid gameId"}
        return res.status(response.status).json(response.message)
    }
    Vulnerability.findById(vulnerabilityId).select('comment').exec(function(err, vulnerability) {
        if(err) {
            console.log("Error reading vulnerability");
            response.status = process.env.HTTP_STATUS_INTERNAL_ERROR;
            response.message = {error : err};

        } 
        else if(!vulnerability) {
            console.log("vulnerability is null");
            response.status = process.env.HTTP_STATUS_NOTFOUND;
            response.message = {message : "vulnerability with given Id not found"};
    }
    if(vulnerability) {
        return _addComment(req, res, vulnerability, response);
    }
    else {
        return res.status(response.status).json(response.message);
    } 
    })
}

const deleteOneComment = function(req, res) {
    return
}

const updateOneComment = function(req, res) {
    return
}
module.exports = {
    getAllComments : getAllComments,
    getOneComment: getOneComment,
    addOneComment: addOneComment,
    deleteOneComment: deleteOneComment,
    updateOneComment: updateOneComment
}