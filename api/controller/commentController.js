const mongoose = require('mongoose');
const Vulnerability = mongoose.model(process.env.VULNERABILITY_MODEL);
const vulnerabilityController = require('./volunerabilityController');


const _updateVulnerability =  function(req, res, vulnerability, response) {
    const updateComment  = vulnerability.comment.id(req.params.commentId);
    if(!updateComment) {
        response.status = process.env.HTTP_STATUS_NOTFOUND;
        response.message = {"message": "comment with this id not found!"}
        return res.status(response.status).json(response.message);
    }
    updateComment.set(req.body);
    vulnerabilityController._saveRefactory(res, vulnerability, response)
}

const _deleteVulnerability =  function(req, res, vulnerability, response) {
    const deletedCom  = vulnerability.comment.id(req.params.commentId);
    if(!deletedCom) {
        response.status = process.env.HTTP_STATUS_NOTFOUND;
        response.message = {"message": "comment with this id not found!"}
        return res.status(response.status).json(response.message);
    }
    vulnerability.comment.id(req.params.commentId).remove();
    vulnerabilityController._saveRefactory(res, vulnerability, response);
    
}

const _addComment = function(req, res, vulnerability, response) {
    const newComment = {
        commentedPerson: "623a7797112eee9b3211cbd2",
        title: req.body.title,
        comment: req.body.comment,
    }
    vulnerability.comment.push(newComment);
    vulnerabilityController._saveRefactory(res, vulnerability, response);
    
}

const getAllComments = function(req, res) {
    console.log("GET One Comment controller Called");
    const vulnerabilityId= req.params.vulnerabilityId;
    const response = vulnerabilityController.initResponse();

    if(!mongoose.isValidObjectId(vulnerabilityId)) {
            console.log("invalid vulnerability Id ");
            response.status = process.env.HTTP_STATUS_NOTFOUND;
            response.message = {message : "Invalid vulnerabilityId"}
            return res.status(response.status).json(response.message)
    }

    Vulnerability.findById(vulnerabilityId).select('comment').exec(function(err, vulnerability) {
        if(err) {
            console.log("Error reading vulnerability");
            response.status = process.env.HTTP_STATUS_INTERNAL_ERROR;
            response.message = err;

        } 
        else {
            if(vulnerability) {
                console.log("Found Vulnerability comment");
                response.status = process.env.HTTP_STATUS_OK;
                response.message = vulnerability.comment;
            }
            else {
                console.log("vulnerability is null");
                response.status = process.env.HTTP_STATUS_NOTFOUND;
                response.message = {message : "vulnerability with given Id not found"};
            }
        }

        return res.status(response.status).json(response.message);
        
        });
}

const getOneComment = function(req, res) {
    console.log("GET One Comment controller Called");
    const vulnerabilityId= req.params.vulnerabilityId;
    const commentId = req.params.commentId;
    const response = vulnerabilityController.initResponse();

    if(!(mongoose.isValidObjectId(vulnerabilityId) && mongoose.isValidObjectId(commentId))) {
            console.log("invalid vulnerability Id or Comment Id are invalid");
            response.status = process.env.HTTP_STATUS_NOTFOUND;
            response.message = {message : "Invalid vulnerabilityId or commentId"}
            return res.status(response.status).json(response.message)
    }

    Vulnerability.findById(vulnerabilityId).select('comment').exec(function(err, vulnerability) {
        if(err) {
            console.log("Error reading vulnerability");
            response.status = process.env.HTTP_STATUS_INTERNAL_ERROR;
            response.message = err;

        } 
        else {
            if(vulnerability) {
                console.log("Found Vulnerability comment");
                response.status = process.env.HTTP_STATUS_OK;
                if(!vulnerability.comment.id(commentId)) {
                    response.message = {"message" : "comment with this id doesn't exist"}
                }else {
                    response.message = vulnerability.comment.id(commentId);
                }
            }
            else {
                console.log("vulnerability is null");
                response.status = process.env.HTTP_STATUS_NOTFOUND;
                response.message = {message : "vulnerability with given Id not found"};
            }
        }

        return res.status(response.status).json(response.message);
        
        });
}
const addOneComment = function(req, res) {
    console.log("Add One Comment Controller Called");
    const vulnerabilityId = req.params.vulnerabilityId;
    const response = vulnerabilityController.initResponse();

    if(!mongoose.isValidObjectId(vulnerabilityId)) {
        console.log("Invalid vulnerabilityID");
        response.status = process.env.HTTP_STATUS_NOTFOUND;
        response.message = {message : "Invalid gameId"}
        return res.status(response.status).json(response.message)
    }
    Vulnerability.findById(vulnerabilityId).select('comment').exec(function(err, vulnerability) {
        if(err) {
            console.log("Error reading vulnerability");
            response.status = process.env.HTTP_STATUS_INTERNAL_ERROR;
            response.message = {error : err};

        } 
        else if(!vulnerability) {
            console.log("vulnerability is null");
            response.status = process.env.HTTP_STATUS_NOTFOUND;
            response.message = {message : "vulnerability with given Id not found"};
    }
    if(vulnerability) {
        return _addComment(req, res, vulnerability, response);
    }
    else {
        return res.status(response.status).json(response.message);
    } 
    })
}

const deleteOneComment = function(req, res) {
    console.log("Delete one Comment controller called");
    const vulnerabilityId= req.params.vulnerabilityId;
    const commentId = req.params.commentId;
    const response = vulnerabilityController.initResponse();
    //check if gameId is valid
    if(!( mongoose.isValidObjectId(commentId) && mongoose.isValidObjectId(vulnerabilityId))) {
            console.log("invalid vulnerability Id or Comment Id");
            response.status = process.env.HTTP_STATUS_NOTFOUND;
            response.message = {message : "Invalid vulnerabilityId or commentId"}
            return res.status(response.status).json(response.message)
    }

    Vulnerability.findById(vulnerabilityId).select('comment').exec(function(err, vulnerability) {
        if(err) {
            console.log("Error reading vulnerability");
            response.status = process.env.HTTP_STATUS_INTERNAL_ERROR;
            response.message = {error : err};

        } 
        else if(!vulnerability) {
                console.log("vulnerability is null");
                response.status = process.env.HTTP_STATUS_NOTFOUND;
                response.message = {message : "Vulnerability with given Id not found"};
        }
        if(vulnerability) {
            _deleteVulnerability(req, res, vulnerability, response);
        }
        else {
            return res.status(response.status).json(response.message);
        }   
        });
}

const updateOneComment = function(req, res) {
    console.log("Delete one Comment controller called");
    const vulnerabilityId= req.params.vulnerabilityId;
    const commentId = req.params.commentId;
    const response = vulnerabilityController.initResponse();
    //check if gameId is valid
    if(!( mongoose.isValidObjectId(commentId) && mongoose.isValidObjectId(vulnerabilityId))) {
            console.log("invalid vulnerability Id or Comment Id");
            response.status = process.env.HTTP_STATUS_NOTFOUND;
            response.message = {message : "Invalid vulnerabilityId or commentId"}
            return res.status(response.status).json(response.message)
    }

    Vulnerability.findById(vulnerabilityId).select('comment').exec(function(err, vulnerability) {
        if(err) {
            console.log("Error reading vulnerability");
            response.status = process.env.HTTP_STATUS_INTERNAL_ERROR;
            response.message = {error : err};

        } 
        else if(!vulnerability) {
                console.log("vulnerability is null");
                response.status = process.env.HTTP_STATUS_NOTFOUND;
                response.message = {message : "Vulnerability with given Id not found"};
        }
        if(vulnerability) {
            _updateVulnerability(req, res, vulnerability, response);
        }
        else {
            return res.status(response.status).json(response.message);
        }   
        });
}
module.exports = {
    getAllComments : getAllComments,
    getOneComment: getOneComment,
    addOneComment: addOneComment,
    deleteOneComment: deleteOneComment,
    updateOneComment: updateOneComment
}