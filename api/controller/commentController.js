const mongoose = require('mongoose');
const Vulnerability = mongoose.model(process.env.VULNERABILITY_MODEL);

const initResponse = function() {
    const response = {
        status : process.env.HTTP_STATUS_OK,
        message : {} 
    }
    return response;
}

const _checkResponseRefactor = function(err, req, res, result, subDocument, methodCallBack, response, commentId=false) {

    if(err) {
        console.log("Error reading vulnerability");
        response.status = process.env.HTTP_STATUS_INTERNAL_ERROR;
        response.message = err;

    } 
    else if(!result) {
        console.log("vulnerability is null");
        response.status = process.env.HTTP_STATUS_NOTFOUND;
        response.message = {message : "vulnerability with given Id not found"};
     }
    if(result) {
        if(methodCallBack) {
            return methodCallBack(req, res, result, response);
        }
        else {
            response.status = process.env.HTTP_STATUS_CREATED;
            if(subDocument) {
                response.message = commentId? result.comment.id(commentId):result.comment;
            }else {
                response.message = result;
            }
            
            return res.status(response.status).json(response.message);
        }
    }
    else {
        return res.status(response.status).json(response.message);
    } 

}

const _saveRefactory = function(res, documentToUpdate, response) {
    //(err, updatedDcoument) => _checkResponseRefactor(err, res, result, subDocument, methodCallBack, response)
    documentToUpdate.save((err, updatedDcoument) => _checkResponseRefactor(err, false, res, updatedDcoument, false, false, response));
}

const _checkObjectIdRefactor = function(res, vulnerabilityId, commentId, response) {

    if(!commentId) {
        if(!(mongoose.isValidObjectId(vulnerabilityId))) {
            console.log("invalid vulnerabilityId");
            response.status = process.env.HTTP_STATUS_NOTFOUND;
            response.message = {message : "Invalid vulnerabilityId"}
            return res.status(response.status).json(response.message)
        }
    } else if(!(mongoose.isValidObjectId(vulnerabilityId) && mongoose.isValidObjectId(commentId))) {
        console.log("invalid vulnerability Id or Comment Id are invalid");
        response.status = process.env.HTTP_STATUS_NOTFOUND;
        response.message = {message : "Invalid vulnerabilityId or commentId"}
        return res.status(response.status).json(response.message)
    }


}

const _findByRefactory = function(req, res, collection, vulnerabilityId, subDocument, response, methodCallBack) {

    
    collection.findById(vulnerabilityId).select(subDocument).exec((err, vulnerability) => _checkResponseRefactor(err, req, res, vulnerability, false, methodCallBack, response));

}



const _updateVulnerability =  function(req, res, vulnerability, response) {
    const updateComment  = vulnerability.comment.id(req.params.commentId);
    if(!updateComment) {
        response.status = process.env.HTTP_STATUS_NOTFOUND;
        response.message = {"message": "comment with this id not found!"}
        return res.status(response.status).json(response.message);
    }
    updateComment.set(req.body);
    _saveRefactory(res, vulnerability, response)
}

const _deleteVulnerability =  function(req, res, vulnerability, response) {
    const deletedCom  = vulnerability.comment.id(req.params.commentId);
    if(!deletedCom) {
        response.status = process.env.HTTP_STATUS_NOTFOUND;
        response.message = {"message": "comment with this id not found!"}
        return res.status(response.status).json(response.message);
    }
    vulnerability.comment.id(req.params.commentId).remove();
    _saveRefactory(res, vulnerability, response);
    
}

const _addComment = function(req, res, vulnerability, response) {
    const newComment = {
        commentedPerson: "623a7797112eee9b3211cbd2",
        title: req.body.title,
        comment: req.body.comment,
    }
    vulnerability.comment.push(newComment);
    _saveRefactory(res, vulnerability, response);
    
}

const getAllComments = function(req, res) {
    console.log("GET All Comment controller Called");
    const vulnerabilityId= req.params.vulnerabilityId;
    const response = initResponse();

    _checkObjectIdRefactor(res, vulnerabilityId, null, response)
    Vulnerability.findById(vulnerabilityId).select('comment').exec((err, vulnerability) => _checkResponseRefactor(err, req, res, vulnerability, true, false, response));
    
}

const getOneComment = function(req, res) {
    console.log("GET One Comment controller Called");
    const vulnerabilityId= req.params.vulnerabilityId;
    const commentId = req.params.commentId;
    const response = initResponse();
    _checkObjectIdRefactor(res, vulnerabilityId, commentId, response)
    Vulnerability.findById(vulnerabilityId).select('comment').exec((err, vulnerability) => _checkResponseRefactor(err, req, res, vulnerability, true, false, response, commentId));
    
}
const addOneComment = function(req, res) {
    console.log("Add One Comment Controller Called");
    const vulnerabilityId = req.params.vulnerabilityId;
    const response = initResponse();

    _checkObjectIdRefactor(res, vulnerabilityId, null, response);
    _findByRefactory(req, res, Vulnerability, vulnerabilityId, 'comment', response, _addComment);
    
}

const deleteOneComment = function(req, res) {
    console.log("Delete one Comment controller called");
    const vulnerabilityId= req.params.vulnerabilityId;
    const commentId = req.params.commentId;
    const response = initResponse();
    _checkObjectIdRefactor(res, vulnerabilityId, commentId, response);
    _findByRefactory(req, res, Vulnerability, vulnerabilityId, 'comment', response, _deleteVulnerability);

}

const updateOneComment = function(req, res) {
    console.log("Delete one Comment controller called");
    const vulnerabilityId= req.params.vulnerabilityId;
    const commentId = req.params.commentId;
    const response = initResponse();
    
    _checkObjectIdRefactor(res, vulnerabilityId, commentId, response);
    _findByRefactory(req, res, Vulnerability, vulnerabilityId, 'comment', response, _updateVulnerability);

    
}
module.exports = {
    getAllComments : getAllComments,
    getOneComment: getOneComment,
    addOneComment: addOneComment,
    deleteOneComment: deleteOneComment,
    updateOneComment: updateOneComment,
    _checkObjectIdRefactor: _checkObjectIdRefactor,
    _saveRefactory: _saveRefactory,
    initResponse: initResponse
}