import { Component, OnInit } from '@angular/core';
import { Vulnerability } from '../vulnerabilities/vulnerabilities.component';
import { VulnerabilityService } from '../vulnerability.service';

@Component({
  selector: 'app-dashboard',
  templateUrl: './dashboard.component.html',
  styleUrls: ['./dashboard.component.css']
})
export class DashboardComponent implements OnInit {

  vulnerabilities!:Vulnerability[];

  typePieSeverity!:string;
  dataPieSeverity = {}
  optionsPieSeverity = {}

  typePieVulnerability!:string;
  dataPieVulnerability = {}
  optionsPieVulnerability = {}

  typeBar!:string;
  dataBar = {}
  optionsBar = {}

  typeLine!:string;
  dataLine = {}
  optionsLine = {}

  constructor(private vulnerabilityService: VulnerabilityService) { }

  ngOnInit(): void {
    this.vulnerabilityService.getVulnerabilities().subscribe(vuls =>  { 
      this.vulnerabilities = vuls;
      this.initializeVulnerabilityPieChart();
      this.initializeBarGraph();
      this.initializeSeverityPieGraph();
      this.initializeLineGraph();
      
      
    })
  }

  initializeBarGraph() {

    this.typeBar = "bar",
    this.dataBar = {

  
      labels: [...new Set( this.vulnerabilities.map(obj => obj.status)) ],
    datasets: [
      {     
        label: "Low",
        fill:'true',
        backgroundColor: '#28b463',
        data:[
          this.vulnerabilities.reduce((n, vul) => vul.status == "closed" && vul.severity=="Low"? n+1:n,0),
          this.vulnerabilities.reduce((n, vul) => vul.status == "in progress" && vul.severity=="Low" ? n+1:n,0),
          this.vulnerabilities.reduce((n, vul) => vul.status == "opened" && vul.severity=="Low" ? n+1:n,0)
          
        ]
      },{
        label: "Medium",
        fill:'true',
        backgroundColor: '#fad7a0',
        data:[
          this.vulnerabilities.reduce((n, vul) => vul.status == "closed" && vul.severity=="Medium"? n+1:n,0),
          this.vulnerabilities.reduce((n, vul) => vul.status == "in progress" && vul.severity=="Medium" ? n+1:n,0),
          this.vulnerabilities.reduce((n, vul) => vul.status == "opened" && vul.severity=="Medium" ? n+1:n,0)
          
        ]
      },
      {
        label: "High",
        fill:'true',
        backgroundColor: '#e59866',
        data:[
          this.vulnerabilities.reduce((n, vul) => vul.status == "closed" && vul.severity=="High"? n+1:n,0),
          this.vulnerabilities.reduce((n, vul) => vul.status == "in progress" && vul.severity=="High" ? n+1:n,0),
          this.vulnerabilities.reduce((n, vul) => vul.status == "opened" && vul.severity=="High" ? n+1:n,0)
          
        ]
      },
      {
        label: "Critical",
        fill:'true',
        backgroundColor: '#ff0266',
        data:[
          this.vulnerabilities.reduce((n, vul) => vul.status == "closed" && vul.severity=="Critical"? n+1:n,0),
          this.vulnerabilities.reduce((n, vul) => vul.status == "in progress" && vul.severity=="Critical" ? n+1:n,0),
          this.vulnerabilities.reduce((n, vul) => vul.status == "opened" && vul.severity=="Critical" ? n+1:n,0)
          
        ]
      }
    ]
  };
  

  }

  initializeLineGraph() { 

    //get six month vulnerability reports
    let myVul:Vulnerability[] = this.vulnerabilities;
    let sixMonthBefore = new Date();
    sixMonthBefore.setMonth(sixMonthBefore.getMonth() - 12);

    myVul = myVul.filter(vul => new Date(vul.createdAt).getTime() >= sixMonthBefore.getTime() )
    // let months = [...(new Set(myVul.map(vul => new Date(vul.createdAt).toLocaleString('default', { month: 'long' }))))]
    // console.log(months);
    let currentMonth = new Date().toLocaleString('default', { month: 'long' })
    let months =  ["January","February","March","April","May","June","July",
    "August","September","October","November","December"]
    
    
    let n = months.indexOf(currentMonth);

    months =  months.slice(n+ 1, months.length).concat(months.slice(0, n + 1));
    

    this.typeLine = 'line';
    this.dataLine = {
      labels :  months,
      datasets: [
        {
          borderColor: 'purple', //line color
          pointRadius:4,
          pointBorderColor: 'white',
          pointBackgroundColor:'#cd486b',
          label: "Number of Vulnerabilities for the last one year",
          fill:false,
          data: [
            myVul.reduce((n, vul) => new Date(vul.createdAt).toLocaleString('default', { month: 'long' }) ==  months[0]? n+1:n,0),
            myVul.reduce((n, vul) => new Date(vul.createdAt).toLocaleString('default', { month: 'long' }) == months[1] ? n+1:n,0),
            myVul.reduce((n, vul) => new Date(vul.createdAt).toLocaleString('default', { month: 'long' }) == months[2] ? n+1:n,0),
            myVul.reduce((n, vul) => new Date(vul.createdAt).toLocaleString('default', { month: 'long' }) == months[3] ? n+1:n,0),
            myVul.reduce((n, vul) => new Date(vul.createdAt).toLocaleString('default', { month: 'long' }) == months[4] ? n+1:n,0),
            myVul.reduce((n, vul) => new Date(vul.createdAt).toLocaleString('default', { month: 'long' }) == months[5] ? n+1:n,0),
            myVul.reduce((n, vul) => new Date(vul.createdAt).toLocaleString('default', { month: 'long' }) == months[6] ? n+1:n,0),
            myVul.reduce((n, vul) => new Date(vul.createdAt).toLocaleString('default', { month: 'long' }) == months[7] ? n+1:n,0),
            myVul.reduce((n, vul) => new Date(vul.createdAt).toLocaleString('default', { month: 'long' }) == months[8] ? n+1:n,0),
            myVul.reduce((n, vul) => new Date(vul.createdAt).toLocaleString('default', { month: 'long' }) == months[9] ? n+1:n,0),
            myVul.reduce((n, vul) => new Date(vul.createdAt).toLocaleString('default', { month: 'long' }) == months[10] ? n+1:n,0),
            myVul.reduce((n, vul) => new Date(vul.createdAt).toLocaleString('default', { month: 'long' }) == months[11] ? n+1:n,0),
          ]
        }
      ]
    }
    this.optionsLine = {
      legend: {
        display: true
    },
      responsive: true,
      maintainAspectRatio: false,
      scales: {
        xAxes: [{ display: true,
                    gridLines: {
                        display:false
                    }
                }],
        yAxes: [{
                    display: true,
                    gridLines: {
                        display:false
                    }   
                }]
    }
    }
    


  }

  initializeVulnerabilityPieChart() {

    this.typePieVulnerability = "doughnut";
    console.log(this.vulnerabilities);
    
    this.dataPieVulnerability = {

  
      labels: ["Broken Access Control", "Cryptographic Failures", "Identification and Authentication Failures	", "Sql Injection", "XSS Script"],
    datasets: [
      {
        fill:'true',
        backgroundColor: ['#2c3e50',' #f4d03f ',' #5b2c6f ', " #3498db ", " #28b463 "],
        data:[
          this.vulnerabilities.reduce((n, vul) => vul.vulnerabilityType == "Broken Access Control" ? n+1:n,0),
          this.vulnerabilities.reduce((n, vul) => vul.vulnerabilityType == "Cryptographic Failures" ? n+1:n,0),
          this.vulnerabilities.reduce((n, vul) => vul.vulnerabilityType == "Identification and Authentication Failures" ? n+1:n,0),
          this.vulnerabilities.reduce((n, vul) => vul.vulnerabilityType == "Sql Injection" ? n+1:n,0),
          this.vulnerabilities.reduce((n, vul) => vul.vulnerabilityType == "XSS Script" ? n+1:n,0)
        ]
      }
    ]
  };
    this.optionsPieVulnerability ={
      legend: {
        display: true
    },
      responsive: true,
      maintainAspectRatio: false,
     
    }
    
  }

  initializeSeverityPieGraph() {
    this.typePieSeverity = "pie";
    this.dataPieSeverity = {

  
      labels: ["Critical", "Medium", "High", "Low"],
    datasets: [
      {
        fill:'true',
        backgroundColor: ['#ff0266',' #fad7a0 ',' #e59866 ','#28b463'],
        data:[
          this.vulnerabilities.reduce((n, vul) => vul.severity == "Critical" ? n+1:n,0),
          this.vulnerabilities.reduce((n, vul) => vul.severity == "Medium" ? n+1:n,0),
          this.vulnerabilities.reduce((n, vul) => vul.severity == "High" ? n+1:n,0),
          this.vulnerabilities.reduce((n, vul) => vul.severity == "Low" ? n+1:n,0)
      ]
      }
    ]
  };
    this.optionsPieSeverity ={
      legend: {
        display: true
    },
      responsive: true,
      maintainAspectRatio: false,
     
    }
    


  }

}
